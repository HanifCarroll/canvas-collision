{"version":3,"sources":["utils.js","Particle.js","app.js"],"names":["canvas","document","querySelector","c","getContext","randomIntFromRange","min","max","Math","floor","random","getRandomColor","letters","split","color","i","round","getDistance","x1","y1","x2","y2","xDist","yDist","sqrt","pow","getObjectDistance","object1","object2","x","y","rotate","velocity","angle","rotatedVelocities","cos","sin","resolveCollision","particle","otherParticle","xVelocityDiff","yVelocityDiff","atan2","m1","mass","m2","u1","u2","v1","v2","vFinal1","vFinal2","mouse","addEventListener","event","Particle","radius","opacity","beginPath","arc","PI","save","globalAlpha","fillStyle","fill","restore","lineWidth","strokeStyle","stroke","closePath","width","height","particles","draw","checkBoundaries","checkHover","length","innerWidth","innerHeight","init","j","push","animate","requestAnimationFrame","clearRect","forEach","update"],"mappings":"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","file":"app.c328ef1a.map","sourceRoot":"../src","sourcesContent":["export const canvas = document.querySelector(\"canvas\");\nexport const c = canvas.getContext(\"2d\");\n\nexport function randomIntFromRange(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function getRandomColor() {\n  const letters = \"0123456789ABCDEF\".split(\"\");\n  let color = \"#\";\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.round(Math.random() * 15)];\n  }\n  return color;\n}\n\nexport function getDistance(x1, y1, x2, y2) {\n  const xDist = x2 - x1;\n  const yDist = y2 - y1;\n\n  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n}\n\nexport function getObjectDistance(object1, object2) {\n  const xDist = object2.x - object1.x;\n  const yDist = object2.y - object1.y;\n\n  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2));\n}\n\n/**\n * Rotates coordinate system for velocities\n *\n * Takes velocities and alters them as if the coordinate system they're on was rotated\n *\n * @param  Object | velocity | The velocity of an individual particle\n * @param  Float  | angle    | The angle of collision between two objects in radians\n * @return Object | The altered x and y velocities after the coordinate system has been rotated\n */\n\nfunction rotate(velocity, angle) {\n  const rotatedVelocities = {\n    x: velocity.x * Math.cos(angle) - velocity.y * Math.sin(angle),\n    y: velocity.x * Math.sin(angle) + velocity.y * Math.cos(angle),\n  };\n\n  return rotatedVelocities;\n}\n\n/**\n * Swaps out two colliding particles' x and y velocities after running through\n * an elastic collision reaction equation\n *\n * @param  Object | particle      | A particle object with x and y coordinates, plus velocity\n * @param  Object | otherParticle | A particle object with x and y coordinates, plus velocity\n * @return Null | Does not return a value\n */\n\nexport function resolveCollision(particle, otherParticle) {\n  const xVelocityDiff = particle.velocity.x - otherParticle.velocity.x;\n  const yVelocityDiff = particle.velocity.y - otherParticle.velocity.y;\n\n  const xDist = otherParticle.x - particle.x;\n  const yDist = otherParticle.y - particle.y;\n\n  // Prevent accidental overlap of particles\n  if (xVelocityDiff * xDist + yVelocityDiff * yDist >= 0) {\n    // Grab angle between the two colliding particles\n    const angle = -Math.atan2(\n      otherParticle.y - particle.y,\n      otherParticle.x - particle.x,\n    );\n\n    // Store mass in var for better readability in collision equation\n    const m1 = particle.mass;\n    const m2 = otherParticle.mass;\n\n    // Velocity before equation\n    const u1 = rotate(particle.velocity, angle);\n    const u2 = rotate(otherParticle.velocity, angle);\n\n    // Velocity after 1d collision equation\n    const v1 = {\n      x: (u1.x * (m1 - m2)) / (m1 + m2) + (u2.x * 2 * m2) / (m1 + m2),\n      y: u1.y,\n    };\n    const v2 = {\n      x: (u2.x * (m1 - m2)) / (m1 + m2) + (u1.x * 2 * m2) / (m1 + m2),\n      y: u2.y,\n    };\n\n    // Final velocity after rotating axis back to original location\n    const vFinal1 = rotate(v1, -angle);\n    const vFinal2 = rotate(v2, -angle);\n\n    // Swap particle velocities for realistic bounce effect\n    particle.velocity.x = vFinal1.x;\n    particle.velocity.y = vFinal1.y;\n\n    otherParticle.velocity.x = vFinal2.x;\n    otherParticle.velocity.y = vFinal2.y;\n  }\n}\n","import {\n  c,\n  canvas,\n  getRandomColor,\n  getObjectDistance,\n  resolveCollision,\n  randomIntFromRange,\n} from \"./utils\";\n\nconst mouse = { x: null, y: null };\n\naddEventListener(\"mousemove\", event => {\n  mouse.x = event.x;\n  mouse.y = event.y;\n});\n\nexport default class Particle {\n  constructor(x, y, radius) {\n    this.x = x;\n    this.y = y;\n    this.velocity = {\n      x: randomIntFromRange(-5, 5),\n      y: randomIntFromRange(-5, 5),\n    };\n    this.radius = radius;\n    this.mass = 1;\n    this.color = getRandomColor();\n    this.opacity = 0;\n  }\n\n  draw() {\n    c.beginPath();\n    c.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    c.save();\n    c.globalAlpha = this.opacity;\n    c.fillStyle = this.color;\n    c.fill();\n    c.restore();\n    c.lineWidth = 2;\n    c.strokeStyle = this.color;\n    c.stroke();\n    c.closePath();\n  }\n\n  checkBoundaries() {\n    if (this.x - this.radius <= 0 || this.x + this.radius >= canvas.width) {\n      this.velocity.x = -this.velocity.x;\n    }\n\n    if (this.y - this.radius <= 0 || this.y + this.radius >= canvas.height) {\n      this.velocity.y = -this.velocity.y;\n    }\n  }\n\n  checkHover() {\n    if (getObjectDistance(this, mouse) < 80 && this.opacity <= 0.2) {\n      this.opacity += 0.05;\n    } else if (this.opacity > 0) {\n      this.opacity -= 0.05;\n\n      this.opacity = Math.max(0, this.opacity);\n    }\n  }\n\n  update(particles) {\n    this.draw();\n    this.checkBoundaries();\n    this.checkHover();\n\n    for (let i = 0; i < particles.length; i++) {\n      if (this === particles[i]) continue;\n\n      if (getObjectDistance(this, particles[i]) - this.radius * 2 < 0) {\n        resolveCollision(this, particles[i]);\n      }\n    }\n\n    this.x += this.velocity.x;\n    this.y += this.velocity.y;\n  }\n}\n","import Particle from \"./Particle\";\nimport { canvas, c, randomIntFromRange, getDistance } from \"./utils\";\n\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\n\n// Event Listeners\naddEventListener(\"resize\", () => {\n  canvas.width = innerWidth;\n  canvas.height = innerHeight;\n\n  init();\n});\n\naddEventListener(\"click\", () => init());\n\n// Implementation\nlet particles;\n\nfunction init() {\n  particles = [];\n\n  for (let i = 0; i < 50; i++) {\n    const radius = 15;\n    let x = randomIntFromRange(radius, canvas.width - 2 * radius);\n    let y = randomIntFromRange(radius, canvas.height - 2 * radius);\n\n    if (i !== 0) {\n      for (let j = 0; j < particles.length; j++) {\n        // If the new particle is spawned on top of another particle,\n        // then reroll the x and y.\n        if (\n          getDistance(x, y, particles[j].x, particles[j].y) - radius * 2 <\n          0\n        ) {\n          x = randomIntFromRange(radius, canvas.width - 2 * radius);\n          y = randomIntFromRange(radius, canvas.height - 2 * radius);\n\n          j = -1;\n        }\n      }\n    }\n    particles.push(new Particle(x, y, radius));\n  }\n}\n\n// Animation Loop\nfunction animate() {\n  requestAnimationFrame(animate);\n  c.clearRect(0, 0, canvas.width, canvas.height);\n\n  particles.forEach(particle => {\n    particle.update(particles);\n  });\n}\n\ninit();\nanimate();\n"]}